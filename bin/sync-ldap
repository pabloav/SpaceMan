#!/usr/bin/perl
use strict; use warnings;
use lib '/opt/spaceman/lib';
use SpaceMan;
use SpaceMan::Config;
use Net::LDAP;

my $man = SpaceMan->new;

my $people = $man->rs( 'Person' );

# TODO - figure out what to do when there are duplicate names
my %people = ();
my %byuid = ();

while ( my $person = $people->next ) {
    next unless $person->posix_uid;
    my $name = $person->name;
    if ( $people{ $name } ) {
        warn "duplicate found! ($name)";
        next;
    }
    $people{ $name } = $person;
    $byuid{ $person->posix_uid } = $person;
}

my $ldap = Net::LDAP->new( 'localhost', onerror => 'die' ) or die "$@";
$ldap->bind(
    $man->config->ldap_sync_dn,
    password => $man->config->ldap_sync_password,
);

my $mesg = $ldap->search(
    base    => "ou=People,".$man->config->ldap_base,
    filter  => '(objectClass=posixAccount)',
);

for my $entry ( $mesg->entries  ) {
    # TODO - delete if not in database
    #$ldap->delete( $dn );
    my $uid = $entry->get_value( 'uidNumber' );
    print "UID: $uid\n";
    if ( my $db = delete $byuid{ $uid } ) {
        my $name = $db->name;
        $name =~ /(\S+)$/;
        my $surname = $1;
        $ldap->modify( $dn => (
            replace => {
                uid             => $db->username,
                sn              => $surname,
                objectClass     => [qw( posixAccount )],
                uidNumber       => $db->posix_uid,
                gidNumber       => 100,
                userPassword    => $db->get_password( 'ssha' ),
                memberOf        => [ map { $_->dn } $db->groups ],
                homeDirectory   => "/home/".$db->username,
                mail            => $db->email,
            },
        ) );
        merge( $db, $entry );
    } else {
        $ldap->delete( $entry->dn );
    }
#    $ldap->modify( $dn => (
#        replace => {
#        },
#    ) );
}

__END__
for my $person ( values %people ) {
    my $uid = $person->posix_uid;
    my $name = $person->name;
    print "dn: cn=$name,ou=People,dc=nova-labs,dc=org\n";
    print "cn: $name\n";
    print "uid: ".$person->username."\n";
    $name =~ /(\S+)$/;
    print "sn: $1\n";
    print "objectClass: posixAccount\n";
    print "uidNumber: $uid\n";
    print "gidNumber: 100\n";
    print "homeDirectory: /home/$name\n";
}
